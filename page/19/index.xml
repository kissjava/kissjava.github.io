<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>清风徐来</title>
    <link>https://kissjava.cn/</link>
    <description>Recent content on 清风徐来</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>kissjava.cn</copyright>
    <lastBuildDate>Sat, 20 Jun 2020 16:57:25 +0800</lastBuildDate>
    
        <atom:link href="https://kissjava.cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>windows下基于apache的subversion（svn）的安装</title>
        <link>https://kissjava.cn/posts/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Eapache%E7%9A%84subversionsvn%E7%9A%84%E5%AE%89%E8%A3%85/</link>
        <pubDate>Wed, 13 May 2009 10:15:00 +0000</pubDate>
        
        <guid>https://kissjava.cn/posts/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Eapache%E7%9A%84subversionsvn%E7%9A%84%E5%AE%89%E8%A3%85/</guid>
        <description>清风徐来 https://kissjava.cn/posts/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Eapache%E7%9A%84subversionsvn%E7%9A%84%E5%AE%89%E8%A3%85/ -&lt;p&gt;上午折腾了一下，可以写个详细步骤出来了。
&lt;!-- raw HTML omitted --&gt;预期目标：&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;搭建一个apache下的svn服务，服务地址 http://localhost/svn&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;本地环境：&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;已经装有xampplite集成环境。
svn的服务目录为D:svnroot
已经安装好了小乌龟（TortoiseSVN）&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;安装步骤：&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;1，下载的适用于windows的Subversion，我下载的是Setup-Subversion-1.5.3.msi
这里注意要和apache的版本对应，我是apache2.2的。
双击安装它，这个没说头。
2，从subversion的安装目录Subversionbin下复制相应的文件到apache的modules目录中
有三个，libdb44.dll mod_authz_svn.so mod_dav_svn.so
（淡水还把Subversionbin下所有的dll文件都复制到了apache的bin下）
3，配置apache的httpd.conf文件
这个是个容易出差错的地方
把下两行的注释去掉：&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;所有人可以读管理员可以写&#34;&gt;所有人可以读，管理员可以写&lt;/h1&gt;
&lt;p&gt;[svn:/]
@g_admin = rw&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;= r&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[svn:/机密文件]
@g_admin = rw&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;=&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[svn:/公告文件]
@g_admin = rw&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;= r&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[svn:/测试组]
@g_admin = rw
@g_test = rw&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;=&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;如果是多个库，则权限文件类似以下&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;所有人可以读管理员可以写-1&#34;&gt;所有人可以读，管理员可以写&lt;/h1&gt;
&lt;p&gt;[/]
@g_admin = rw&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;= r&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[khn:/]
@g_admin = rw&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;=&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[ci170:/]
@g_admin = rw
@g_test = rw&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;= r&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;6，在d:svnroot下，用tortoiseSVN创建版本库。
7，重启apache。搞定了。
&lt;!-- raw HTML omitted --&gt;注意点：&lt;!-- raw HTML omitted --&gt;
先不要启用权限控制。用tortoiseSVN登录进入以后，创建文件夹后，再启用权限控制。
如果想要把地址改成http://localhost/kisssvn，两步：apache的httpd.conf 里 改为&amp;lt;Location /kisssvn&amp;gt;，再把权限文档里的[svn:/]等改成[kisssvn:/]。ok&lt;/p&gt;
- https://kissjava.cn/posts/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Eapache%E7%9A%84subversionsvn%E7%9A%84%E5%AE%89%E8%A3%85/ - kissjava.cn</description>
        </item>
    
    
    
        <item>
        <title>PHP5的SOAP扩展</title>
        <link>https://kissjava.cn/posts/php5%E7%9A%84soap%E6%89%A9%E5%B1%95/</link>
        <pubDate>Mon, 11 May 2009 17:09:07 +0000</pubDate>
        
        <guid>https://kissjava.cn/posts/php5%E7%9A%84soap%E6%89%A9%E5%B1%95/</guid>
        <description>清风徐来 https://kissjava.cn/posts/php5%E7%9A%84soap%E6%89%A9%E5%B1%95/ -&lt;p&gt;&lt;!-- raw HTML omitted --&gt;简介&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;PHP的SOAP扩展可以用来提供和使用Web services。换句话说，PHP开发者可以利用这个PHP扩展来写他们自己的Web services，也可以写一些客户端来使用已有的Web services。&lt;/p&gt;
&lt;p&gt;PHP5中的这个SOAP扩展目的是为了实现PHP对Web services的支持。与其它实现PHP对Web services的支持的方法不同，SOAP扩展是用C写的，因此它比其它方法（比较出名的Nusoap类）具有速度优势。&lt;/p&gt;
&lt;p&gt;SOAP扩展支持以下规范。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SOAP 1.1&lt;/li&gt;
&lt;li&gt;SOAP 1.2&lt;/li&gt;
&lt;li&gt;WSDL 1.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SOAP扩展主要用来处理RPC形式的Web services。不过，你也可以使用文本形式的WSDL文件配合WSDL模式的服务端和客户端。&lt;/p&gt;
&lt;p&gt;这个扩展使用 GNOME XML库来处理XML。&lt;/p&gt;
&lt;p&gt;扩展中的类
这个扩展实现了6个类。
其中有三个高级的类，它们的方法很有用，它们是 SoapClient，SoapServer和SoapFault。
另外三个类除了构造器外没有其它别的方法，这三个是低级的类，它们是SoapHeader，SoapParam和SoapVar。
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;SoapClient类&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;这个类用来使用Web services。SoapClient类可以作为给定Web services的客户端。
它有两种操作形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WSDL 模式&lt;/li&gt;
&lt;li&gt;Non-WSDL 模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在WSDL模式中，构造器可以使用WSDL文件名作为参数，并从WSDL中提取服务所使用的信息。&lt;/p&gt;
&lt;p&gt;non-WSDL模式中使用参数来传递要使用的信息。这个类有许多可以用来使用服务的有用的方法。其中SoapClient::__soapCall()是最重要的。这个方法可以用来调用服务中的某个操作。&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;SoapServer类&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;这个类可以用来提供Web services。与SoapClient类似，SoapServer也有两种操作模式：WSDL模式和non-WSDL模式。这两种模式的意义跟 SoapClient的两种模式一样。在WSDL模式中，服务实现了WSDL提供的接口；在non-WSDL模式中，参数被用来管理服务的行为。&lt;/p&gt;
&lt;p&gt;在SoapServer类的众多方法中，有三个方法比较重要。它们是SoapServer::setClass()，SoapServer::addFunction()和SoapServer::handle()。&lt;/p&gt;
&lt;p&gt;SoapServer::setClass()方法设定用来实现Web Service的类。SoapServer::setClass所设定的类中的所有公共方法将成为Web Services的操作(operation)。&lt;/p&gt;
&lt;p&gt;SoapServer::addFunction()方法用来添加一个或多个作为Web Services操作(operation)的函数。&lt;/p&gt;
&lt;p&gt;SoapServer:: handle()方法指示Web Service脚本开始处理进入的请求。Web Service脚本是用PHP脚本写的一个或多个SoapServer对象的实例。尽管你可以有不止一个的SoapServer对象，但通常的习惯是一个脚本只拥有一个SoapServer实例。在调用SoapServer::handle()方法之前，Web Service脚本会使用设置在SoapServer对象实例上的任何信息来处理进入的请求和输出的相应。&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;SoapFault类&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;这个类从Exception类继承而来，可以用来处理错误。SoapFault实例可以抛出或获取Soap错误的相关信息并按程序员的请求处理。&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;SoapHeader类&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;这个类可以用来描述SOAP headers。它只是一个只包含构造器方法的数据容器。&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;SoapParam类&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;SoapParam也是一个只包含构造器方法的数据容器。这个方法可以用来描述传递给Web services操作的参数。在non-WSDL模式中这是一个很有用的类，可以用来传递所期望格式的参数信息。&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;SoapVar类&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;SoapVar也是一个只包含构造器的低级类，与SoapHeader和SoapParam类相似。这个类可以用来给一个Web services操作传递编码参数。这个类对non-WSDL中传递类型信息是非常有用的。&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;WSDL VS. non-WSDL模式&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Web Services有两种实现模式：契约先行(Contract first)模式和代码先行(Code first)模式。&lt;/p&gt;
&lt;p&gt;契约先行模式使用了一个用XML定义的服务接口的WSDL文件。WSDL文件定义了服务必须实现或客户端必须使用的接口。SoapServer和SoapClient的WSDL模式就基于这个概念。&lt;/p&gt;
&lt;p&gt;在代码先行模式中，首先要先写出实现服务的代码。然后在大多数情况下，代码会产生一个契约，换种说法，一个WSDL。接着客户端在使用服务的时候就可以使用那个WSDL来获得服务的接口。尽管如此，PHP5的扩展并没有从代码输出一个WSDL的规定，考虑到这种情况，可以在non-WSDL模式下使用 SoapServer和SoapClient。&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;SOAP扩展与Hello World&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;这一节介绍如何使用WSDL模式和non-WSDL模式来实现服务和客户端。相对而言，使用WSDL模式来实现服务和客户端会比较容易，假定已经有一个定义了接口的WSDL文件。（淡水对WSDL还比较陌生，就只关注non-wsdl模式了。）&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;在这个Hello World例子的服务中有一个被命名为greet的操作。这个操作有一个字符串形式的名字并返回一个字符串形式的greeting。所用到的WSDL如下：&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;WSDL模式服务&lt;/p&gt;
&lt;p&gt;下面是WSDL模式的服务所使用的SOAP扩展API代码：&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;在这个服务的实现过程中，函数实现了WSDL所定义的服务操作greet，greet操作有一个WSDL指定的参数，按照greet操作的语义，这个参数是一个用户的名字。最后handle调用了触发处理请求的服务对象。&lt;/p&gt;
&lt;p&gt;WSDL模式客户端&lt;/p&gt;
&lt;p&gt;客户端代码如下&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;客户端代码中，首先创建一个使用WSDL文件作参数的SoapClient实例。接着__soapCall()调用作为参数传入它的操作，也就是greet和传入操作的参数。
请求和响应&lt;/p&gt;
&lt;p&gt;当你将上述的PHP脚本放在你web服务器目录下的文档中，并利用WEB浏览器或在PHP解析器的命令行调用脚本，客户端发送一个SOAP请求到服务端脚本，服务端将向客户端发送一个SOAP响应来响应客户端的请求。&lt;/p&gt;
&lt;p&gt;下面是客户端所发送的SOAP请求：
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&amp;lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&amp;quot;http://schemas.xmlsoap.org/soap/envelope/&amp;rdquo;                    &lt;br&gt;
xmlns:ns1=&amp;quot;http://wso2.org/wsf/php/helloService&amp;quot;&amp;gt; &lt;br&gt;
&lt;a href=&#34;SOAP-ENV:Body&#34;&gt;SOAP-ENV:Body&lt;/a&gt;
&lt;a href=&#34;ns1:greet&#34;&gt;ns1:greet&lt;/a&gt;
&lt;a href=&#34;ns1:name&#34;&gt;ns1:name&lt;/a&gt;Sam&amp;lt;/ns1:name&amp;gt;
&amp;lt;/ns1:greet&amp;gt;
&amp;lt;/SOAP-ENV:Body&amp;gt;
&amp;lt;/SOAP-ENV:Envelope&amp;gt;
&lt;!-- raw HTML omitted --&gt;
下面是服务端响应上诉请求而发送的SOAP响应：
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&amp;lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&amp;quot;http://schemas.xmlsoap.org/soap/envelope/&amp;rdquo;
xmlns:ns1=&amp;quot;http://wso2.org/wsf/php/helloService&amp;quot;&amp;gt;
&lt;a href=&#34;SOAP-ENV:Body&#34;&gt;SOAP-ENV:Body&lt;/a&gt;
&lt;a href=&#34;ns1:greetResponse&#34;&gt;ns1:greetResponse&lt;/a&gt;
&lt;a href=&#34;ns1:greetReturn&#34;&gt;ns1:greetReturn&lt;/a&gt;Hello Sam&amp;lt;/ns1:greetReturn&amp;gt;
&amp;lt;/ns1:greetResponse&amp;gt;
&amp;lt;/SOAP-ENV:Body&amp;gt;
&amp;lt;/SOAP-ENV:Envelope&amp;gt;
&lt;!-- raw HTML omitted --&gt;
上面的SOAP消息都是利用WSDL模式的服务端和客户端来获取的。也可以利用non-WSDL模式的服务端和客户端来产生与上面相同的SOAP消息。但是，PHP代码必须有一点改变。下一节会说明如何使用non-WSDL模式。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;non-WSDL模式服务端&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;$server = new SoapServer(null, array(&amp;lsquo;uri&amp;rsquo; =&amp;gt; &amp;lsquo;&lt;a href=&#34;http://wso2.org/wsf/php/helloService&#39;));&#34;&gt;http://wso2.org/wsf/php/helloService&#39;));&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;$server-&amp;gt;addFunction(&amp;lsquo;greet&amp;rsquo;);
$server-&amp;gt;handle();
?&amp;gt;
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;在non -WSDL模式中，想WSDL模式一样首先实现greet函数的功能，但是函数实现的方式跟WSDL模式稍稍有所不同。在non-WSDL模式中，我们必须返回一个SoapParam对象作为响应，而不是一个数组。创建服务时，第一个参数设为null，说明没有提供WSDL；接着传递一个选项作为参数，这个选项参数是服务的URI。最后像WSDL模式一样调用剩下的方法。&lt;/p&gt;
&lt;p&gt;non-WSDL模式客户端&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;在non-WSDL模式中，因为没有使用WSDL，传递了一个包含服务所在位置和服务URI的参数数组作为参数。然后象WSDL模式中一样调用__soapCall()方法，但是使用了SoapParam类用指定格式打包参数。返回的结果将获取greet中的响应。&lt;/p&gt;
- https://kissjava.cn/posts/php5%E7%9A%84soap%E6%89%A9%E5%B1%95/ - kissjava.cn</description>
        </item>
    
    
    
        <item>
        <title>php5下web service的大致浏览(注意php调用.net的web services的方式)</title>
        <link>https://kissjava.cn/posts/php5%E4%B8%8Bweb-service%E7%9A%84%E5%A4%A7%E8%87%B4%E6%B5%8F%E8%A7%88%E6%B3%A8%E6%84%8Fphp%E8%B0%83%E7%94%A8.net%E7%9A%84web-services%E7%9A%84%E6%96%B9%E5%BC%8F/</link>
        <pubDate>Mon, 11 May 2009 16:48:42 +0000</pubDate>
        
        <guid>https://kissjava.cn/posts/php5%E4%B8%8Bweb-service%E7%9A%84%E5%A4%A7%E8%87%B4%E6%B5%8F%E8%A7%88%E6%B3%A8%E6%84%8Fphp%E8%B0%83%E7%94%A8.net%E7%9A%84web-services%E7%9A%84%E6%96%B9%E5%BC%8F/</guid>
        <description>清风徐来 https://kissjava.cn/posts/php5%E4%B8%8Bweb-service%E7%9A%84%E5%A4%A7%E8%87%B4%E6%B5%8F%E8%A7%88%E6%B3%A8%E6%84%8Fphp%E8%B0%83%E7%94%A8.net%E7%9A%84web-services%E7%9A%84%E6%96%B9%E5%BC%8F/ -&lt;p&gt;嗯，又找到一些好玩的东西，web service。
有个叫Nusoap类，在php4下比较流行。但是淡水这次玩的是php5，所以他就没戏了。
先恶补一下相关知识。
先要打开php5的web service扩展。linux下，嗯，好像不会-_-!。windows下，把php.ini文件中 extension=php_soap.dll 去掉注释即可。
方法：
SoapClient-&amp;gt;__soapCall()
说明：
class SoapClient {
mixed __soapCall ( string function_name, array arguments [, array options [, mixed input_headers [, array &amp;amp;output_headers]]])
}
In WSDL mode, you can simply call SOAP functions as SoapClient methods. This method useful in non-WSDL mode when soapaction is unknown, uri differs from the default or when sending and/or receiving SOAP Headers
返回值：
一个简单类型的返回值，或是一个关联数组
例子：
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;SOAP发送的协议：&lt;/p&gt;
&lt;p&gt;POST /servicepath/service.asmx HTTP/1.1
Host: 211.186.1.4
Content-Type: text/xml; charset=utf-8
Content-Length: length
SOAPAction: &amp;ldquo;http://211.186.5.15/Service/ServiceMethod&amp;rdquo;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;调用方法：
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;SOAP发送协议：&lt;/p&gt;
&lt;p&gt;POST /services/SoapMethod?WSDL HTTP/1.1
Host: 220.211.1.12:8088
Connection: Keep-Alive
User-Agent: PHP-SOAP/5.2.5
Content-Type: text/xml; charset=utf-8
SOAPAction: &amp;ldquo;urn:SoapMethod#ServiceMethod&amp;rdquo;
Content-Length: 1297&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;调用方法：
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;name
参数名
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
- https://kissjava.cn/posts/php5%E4%B8%8Bweb-service%E7%9A%84%E5%A4%A7%E8%87%B4%E6%B5%8F%E8%A7%88%E6%B3%A8%E6%84%8Fphp%E8%B0%83%E7%94%A8.net%E7%9A%84web-services%E7%9A%84%E6%96%B9%E5%BC%8F/ - kissjava.cn</description>
        </item>
    
    
    
        <item>
        <title>kohana版企业站范例进行中</title>
        <link>https://kissjava.cn/posts/kohana%E7%89%88%E4%BC%81%E4%B8%9A%E7%AB%99%E8%8C%83%E4%BE%8B%E8%BF%9B%E8%A1%8C%E4%B8%AD/</link>
        <pubDate>Sat, 02 May 2009 06:51:31 +0000</pubDate>
        
        <guid>https://kissjava.cn/posts/kohana%E7%89%88%E4%BC%81%E4%B8%9A%E7%AB%99%E8%8C%83%E4%BE%8B%E8%BF%9B%E8%A1%8C%E4%B8%AD/</guid>
        <description>清风徐来 https://kissjava.cn/posts/kohana%E7%89%88%E4%BC%81%E4%B8%9A%E7%AB%99%E8%8C%83%E4%BE%8B%E8%BF%9B%E8%A1%8C%E4%B8%AD/ -&lt;p&gt;以前是用codeigniter做的，但是为了更敏捷的开发，提高生产效率（其实是要偷懒），所以开始摸索kohana，并为之着迷（主要是ORM）。&lt;/p&gt;
&lt;p&gt;为了尽快上手kohana，所以把以前公布的企业站又用kohana改写一番。
现在前端已经完成。&lt;/p&gt;
&lt;p&gt;kohana版，为了简化代码，使用了ORM
Codeigniter版，采用了他提供的AR&lt;/p&gt;
&lt;p&gt;可以自己感觉一下执行效率如内存占用&lt;/p&gt;
&lt;p&gt;kohana版&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;http://tsingfeng.sinaapp.com/khn&#34;&gt;http://tsingfeng.sinaapp.com/khn&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;
一般结果：Page rendered in 0.0301 seconds.UseMem 1.62MB.&lt;/p&gt;
&lt;p&gt;Codeigniter版&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;http://tsingfeng.sinaapp.com/ci&#34;&gt;http://tsingfeng.sinaapp.com/ci&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;
一般结果：Page rendered in 0.0248 seconds.UseMem 1.78MB.&lt;/p&gt;
&lt;p&gt;淡水没有专业的测试经验，只是凭框架本身提供的简陋数据和直觉判断。差不多了，如果空间支持php5最好还是用kohana，可以比较快些完成工作^_^&lt;/p&gt;
&lt;p&gt;2009.5.3 update:
给kohana版的加上了含分页的新闻列表页面 &lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;http://tsingfeng.sinaapp.com/khn/index.php/news&#34;&gt;http://tsingfeng.sinaapp.com/khn/index.php/news&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
- https://kissjava.cn/posts/kohana%E7%89%88%E4%BC%81%E4%B8%9A%E7%AB%99%E8%8C%83%E4%BE%8B%E8%BF%9B%E8%A1%8C%E4%B8%AD/ - kissjava.cn</description>
        </item>
    
    
    
        <item>
        <title>Kohana 与JQUERY实现连动</title>
        <link>https://kissjava.cn/posts/kohana-%E4%B8%8Ejquery%E5%AE%9E%E7%8E%B0%E8%BF%9E%E5%8A%A8/</link>
        <pubDate>Thu, 23 Apr 2009 16:10:25 +0000</pubDate>
        
        <guid>https://kissjava.cn/posts/kohana-%E4%B8%8Ejquery%E5%AE%9E%E7%8E%B0%E8%BF%9E%E5%8A%A8/</guid>
        <description>清风徐来 https://kissjava.cn/posts/kohana-%E4%B8%8Ejquery%E5%AE%9E%E7%8E%B0%E8%BF%9E%E5%8A%A8/ -&lt;p&gt;控制器
&lt;!-- raw HTML omitted --&gt;
/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ajax加载城市分类&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;*/
public function load_cities($id)
{
$id = (int) $id;
if (!$id) {
exit(&amp;quot;{result:0,msg:&amp;lsquo;错误的城市编号&amp;rsquo;}&amp;quot;);
}
$cities = ORM::factory(&amp;lsquo;city&amp;rsquo;);
$cats = $cities-&amp;gt;where(&amp;lsquo;province_id&amp;rsquo;,$id)-&amp;gt;select_list(&amp;lsquo;id&amp;rsquo;,&amp;lsquo;name&amp;rsquo;);
if (!count($cats)) {
$cats = array();
}
ksort($cats);
exit(&amp;quot;{result:1,msg:&amp;quot;.json_encode($cats).&amp;quot;}&amp;quot;);
}&lt;/p&gt;
&lt;p&gt;public function index()
{
//生成省市下拉列表
$provinces = ORM::factory(&amp;lsquo;province&amp;rsquo;)-&amp;gt;select_list(&amp;lsquo;id&amp;rsquo;,&amp;lsquo;name&amp;rsquo;);
$provinces[&#39;&#39;] = &amp;lsquo;未选择&amp;rsquo;;
ksort($provinces);
$this-&amp;gt;template-&amp;gt;provinces = $provinces;
if ($data[&amp;lsquo;province_id&amp;rsquo;]) {
$cities = ORM::factory(’city’)-&amp;gt;where(’province_id’,$data[&amp;lsquo;province_id&amp;rsquo;])-&amp;gt;select_list(’id’,&amp;lsquo;name&amp;rsquo;);
}
$cities[&#39;&#39;] = &amp;lsquo;未选择&amp;rsquo;;
ksort($cities);
$this-&amp;gt;template-&amp;gt;cities = $cities;
$this-&amp;gt;add_script(&amp;lsquo;home/js/company/add.js?3&amp;rsquo;);
}
&lt;!-- raw HTML omitted --&gt;
view
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;});
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
- https://kissjava.cn/posts/kohana-%E4%B8%8Ejquery%E5%AE%9E%E7%8E%B0%E8%BF%9E%E5%8A%A8/ - kissjava.cn</description>
        </item>
    
    
    
        <item>
        <title>kohana一个工程下面建立多个项目app</title>
        <link>https://kissjava.cn/posts/kohana%E4%B8%80%E4%B8%AA%E5%B7%A5%E7%A8%8B%E4%B8%8B%E9%9D%A2%E5%BB%BA%E7%AB%8B%E5%A4%9A%E4%B8%AA%E9%A1%B9%E7%9B%AEapp/</link>
        <pubDate>Thu, 23 Apr 2009 16:00:35 +0000</pubDate>
        
        <guid>https://kissjava.cn/posts/kohana%E4%B8%80%E4%B8%AA%E5%B7%A5%E7%A8%8B%E4%B8%8B%E9%9D%A2%E5%BB%BA%E7%AB%8B%E5%A4%9A%E4%B8%AA%E9%A1%B9%E7%9B%AEapp/</guid>
        <description>清风徐来 https://kissjava.cn/posts/kohana%E4%B8%80%E4%B8%AA%E5%B7%A5%E7%A8%8B%E4%B8%8B%E9%9D%A2%E5%BB%BA%E7%AB%8B%E5%A4%9A%E4%B8%AA%E9%A1%B9%E7%9B%AEapp/ -&lt;p&gt;其实核心的意思就是使用多个application文件夹，而共享一个system和module&lt;/p&gt;
&lt;p&gt;请参考文章：http://learn.kohanaphp.com/2008/08/15/initial-setup-of-a-kohana-project-revisited/
具体办法就是建立类似的文件夹结构：&lt;/p&gt;
&lt;p&gt;app_admin    // administration application
app_sales     // sales application
app_public   // public website
modules
system
webroot
然后注意写配置文件就OK了&lt;/p&gt;
&lt;p&gt;app_admin/config/config.php: $config[&amp;lsquo;site_domain&amp;rsquo;] = ‘localhost/admin/’;&lt;/p&gt;
&lt;p&gt;app_sales/config/config.php: $config[&amp;lsquo;site_domain&amp;rsquo;] = ‘localhost/sales/’;&lt;/p&gt;
&lt;p&gt;app_public/config/config.php: $config[&amp;lsquo;site_domain&amp;rsquo;] = ‘localhost/’;&lt;/p&gt;
- https://kissjava.cn/posts/kohana%E4%B8%80%E4%B8%AA%E5%B7%A5%E7%A8%8B%E4%B8%8B%E9%9D%A2%E5%BB%BA%E7%AB%8B%E5%A4%9A%E4%B8%AA%E9%A1%B9%E7%9B%AEapp/ - kissjava.cn</description>
        </item>
    
    
    
        <item>
        <title>Kohana的Events和Hooks研究</title>
        <link>https://kissjava.cn/posts/kohana%E7%9A%84events%E5%92%8Chooks%E7%A0%94%E7%A9%B6/</link>
        <pubDate>Thu, 23 Apr 2009 15:59:38 +0000</pubDate>
        
        <guid>https://kissjava.cn/posts/kohana%E7%9A%84events%E5%92%8Chooks%E7%A0%94%E7%A9%B6/</guid>
        <description>清风徐来 https://kissjava.cn/posts/kohana%E7%9A%84events%E5%92%8Chooks%E7%A0%94%E7%A9%B6/ -&lt;p&gt;Kohana是一个使用PHP5的面向对象的MVC框架，是从CodeIgniter衍生出来，研究了几天，感觉还不错，就是它的文档实在太简陋了，在看到它的Events机制和Hooks机制时，确实有点不明白，文档上说的实在太简单了，后来我在Google上搜索了一下，找到两篇文章《Events and hooks in Kohana》和《Practical Kohana Hooks example: PHPIDS》，上面讲了一下Kohana的Events和Hooks，并举了例子，我也开始慢慢理解了它的含义。&lt;/p&gt;
&lt;p&gt;在Kohana的Events中，默认定义了很多的Events（例如system.ready、system.pre_controller等等），中文理解就是事件，也就是触发点，在程序在运行到某个位置时，会被触发，具体就是调用Event::run方法，我们在Kohana.php里可以看到在不同的位置执行了不同的Event::run方法，那么Hooks的意义在于当一个事件被触发之前，可以通过已加载的Hooks来修改事件的回调，有点绕口，说白了就是在事件发生之前，做点事情，举个例子，你安排了今天的日程，下午3点要开会，那么在3点开会就是一个Event（事件），那么到3点的时刻，你希望提醒你一下，你在你的手机里定了一个闹钟，在3点的时候会响，这就是一个Hook，可以看出Hook是基于Event的。&lt;/p&gt;
&lt;p&gt;我们可以创建自己的Hook程序，并加载如默认的Events里，但是默认的Events不一定能满足我们的需要，比如我们在Web应用中经常使用的权限校验，判断这个用户是否登陆过，我们虽然可以使用默认Events里的system.pre_controller，但是这个Event是针对所有的Controller的，有些Controller是不需要校验用户的，还好Kohana允许自己定义Event，下面我们还是举例说明吧。&lt;/p&gt;
&lt;p&gt;要使用Hooks，首先要在application/config/config.php里将$config[&amp;lsquo;enable_hooks&amp;rsquo;]置为TRUE。&lt;/p&gt;
&lt;p&gt;之后我们定义自己的Event，我们在application/controllers目录下建立base.php，代码如下：
&lt;!-- raw HTML omitted --&gt;
class Base_Controller extends Controller  {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public function __construct() {
    parent::__construct();
    Event::run(&amp;quot;base.construct&amp;quot;);
}	
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}
&lt;!-- raw HTML omitted --&gt;
我们继承了Kohana的Controller，在构造函数里定义了Event，名字叫“base.construct”，以后我们的Controller都继承自Base_Controller，那么在对象创建的时候都会触发base.construct事件。&lt;/p&gt;
&lt;p&gt;Hook的文件放在application/hooks下，我们就创建一个hook文件sessioncheck.php，代码如下：
&lt;!-- raw HTML omitted --&gt;
class SessionCheck {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public function check() {
    echo &amp;quot;check session ...&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;Event::add(&amp;lsquo;base.construct&amp;rsquo;, array(&amp;lsquo;SessionCheck&amp;rsquo;,&amp;lsquo;check&amp;rsquo;));
&lt;!-- raw HTML omitted --&gt;
我们将SessionCheck的check方法加载到了base.construct事件上，也就是在触发base.construct事件之前，会执行SessionCheck的check方法。&lt;/p&gt;
&lt;p&gt;接下来我们写一个Controller，在application/controllers目录下建立first.php，代码如下：
&lt;!-- raw HTML omitted --&gt;
class First_Controller extends Base_Controller  {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public function index() {
    echo &amp;quot;First - index&amp;quot;;
    exit();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}
&lt;!-- raw HTML omitted --&gt;
我们执行一下看看会有什么提示，http://localhost/kohana/first，显示&lt;/p&gt;
&lt;p&gt;check session …First - index&lt;/p&gt;
&lt;p&gt;没问题了，在Controller构造时，执行了Hook里的方法。&lt;/p&gt;
&lt;p&gt;from：http://i.laoer.com/&lt;/p&gt;
- https://kissjava.cn/posts/kohana%E7%9A%84events%E5%92%8Chooks%E7%A0%94%E7%A9%B6/ - kissjava.cn</description>
        </item>
    
    
    
        <item>
        <title>Kohana的Cache</title>
        <link>https://kissjava.cn/posts/kohana%E7%9A%84cache/</link>
        <pubDate>Thu, 23 Apr 2009 15:59:13 +0000</pubDate>
        
        <guid>https://kissjava.cn/posts/kohana%E7%9A%84cache/</guid>
        <description>清风徐来 https://kissjava.cn/posts/kohana%E7%9A%84cache/ -&lt;p&gt;Kohana里有个Cache Library，我今天就测试了一下。&lt;/p&gt;
&lt;p&gt;首先要配置，将system/config下的cache.php复制到application/config下，打开cache.php文件，我们看一下内容&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;在应用中，可能需要不止一个缓存，所以可以配置多个缓存，增加$config数组即可，还有在file方式下可以为每个缓存设置单独文件路径，但前提是文件路径要存在，例如我们增加一个&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;public function index() {
    $mychache = Cache::instance(&amp;quot;my&amp;quot;);
    $mychache-&amp;gt;set(&amp;quot;name&amp;quot;,&amp;quot;laoer&amp;quot;);
    echo &amp;quot;OK&amp;quot;;   
}

public function name() {
    $mychache= Cache::instance(&amp;quot;my&amp;quot;);
    $name = $mychache-&amp;gt;get(&amp;quot;name&amp;quot;);
    echo $name;
}   
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}
&lt;!-- raw HTML omitted --&gt;
Cache::instance(”my”)实例化配置里$config[&amp;lsquo;my&amp;rsquo;]的cache，如果用Cache::instance()就是实例化配置里$config[&amp;lsquo;default&amp;rsquo;]的cache，在浏览器里执行，已经可以存取了，在application/cache/my/文件下可以看到一个名为”name~~0″的文件，里面就是序列化的数据。&lt;/p&gt;
&lt;p&gt;文件cache还是有一定的局限性，现在越来越的网站开始使用Memcached所谓缓存的解决方案，Kohana的缓存驱动里，有Memcached的支持，但它的文档却没有给出Memcached的配置例子，看来要自己摸索一下。&lt;/p&gt;
&lt;p&gt;将system/config下的cache_memcache.php复制到application/config下，cache_memcache.php的内容如下&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enable cache data compression.
*/
$config[&amp;lsquo;compression&amp;rsquo;] = FALSE;
&lt;!-- raw HTML omitted --&gt;
根据你自己的情况修改Memcached的服务地址和端口，在application/config/cache.php里再加一段
&lt;!-- raw HTML omitted --&gt;
$config[&amp;lsquo;mem&amp;rsquo;] = array
(
&amp;lsquo;driver&amp;rsquo;   =&amp;gt; &amp;lsquo;memcache&amp;rsquo;,
&amp;lsquo;params&amp;rsquo;   =&amp;gt; &amp;lsquo;&amp;rsquo;,
&amp;lsquo;lifetime&amp;rsquo; =&amp;gt; 1800,
&amp;lsquo;requests&amp;rsquo; =&amp;gt; 1000
);
&lt;!-- raw HTML omitted --&gt;
在Controller里把Cache::instance(”my”)改为Cache::instance(”mem”)，运行看看结果，已经可以从Memcahced里存取了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kohana的Memcached驱动还是有些缺陷，现在只能使用一组Memcached，即$config[&amp;lsquo;servers&amp;rsquo;]这个参数，我觉得Memcacahed组也应该是多个，因为从业务角度会根据功能对cache做划分，我大概看了一下system/libraries/drivers/Cache/Memcache.php文件，应该是可以改造的，还有一点，编译PHP的时候要安装Memcached的支持。&lt;/p&gt;
&lt;p&gt;from：http://i.laoer.com/&lt;/p&gt;
- https://kissjava.cn/posts/kohana%E7%9A%84cache/ - kissjava.cn</description>
        </item>
    
    
    
        <item>
        <title>牛刀：“小阳春”突破的是法律的底线</title>
        <link>https://kissjava.cn/posts/%E7%89%9B%E5%88%80%E5%B0%8F%E9%98%B3%E6%98%A5%E7%AA%81%E7%A0%B4%E7%9A%84%E6%98%AF%E6%B3%95%E5%BE%8B%E7%9A%84%E5%BA%95%E7%BA%BF/</link>
        <pubDate>Sun, 12 Apr 2009 11:44:35 +0000</pubDate>
        
        <guid>https://kissjava.cn/posts/%E7%89%9B%E5%88%80%E5%B0%8F%E9%98%B3%E6%98%A5%E7%AA%81%E7%A0%B4%E7%9A%84%E6%98%AF%E6%B3%95%E5%BE%8B%E7%9A%84%E5%BA%95%E7%BA%BF/</guid>
        <description>清风徐来 https://kissjava.cn/posts/%E7%89%9B%E5%88%80%E5%B0%8F%E9%98%B3%E6%98%A5%E7%AA%81%E7%A0%B4%E7%9A%84%E6%98%AF%E6%B3%95%E5%BE%8B%E7%9A%84%E5%BA%95%E7%BA%BF/ -&lt;p&gt;打算买房，收些资料。
&lt;a href=&#34;http://qzone.qq.com/blog/348973589-1239434360&#34;&gt;http://qzone.qq.com/blog/348973589-1239434360&lt;/a&gt;&lt;/p&gt;
- https://kissjava.cn/posts/%E7%89%9B%E5%88%80%E5%B0%8F%E9%98%B3%E6%98%A5%E7%AA%81%E7%A0%B4%E7%9A%84%E6%98%AF%E6%B3%95%E5%BE%8B%E7%9A%84%E5%BA%95%E7%BA%BF/ - kissjava.cn</description>
        </item>
    
    
    
        <item>
        <title>ci中文转拼音的library</title>
        <link>https://kissjava.cn/posts/ci%E4%B8%AD%E6%96%87%E8%BD%AC%E6%8B%BC%E9%9F%B3%E7%9A%84library/</link>
        <pubDate>Tue, 31 Mar 2009 12:28:15 +0000</pubDate>
        
        <guid>https://kissjava.cn/posts/ci%E4%B8%AD%E6%96%87%E8%BD%AC%E6%8B%BC%E9%9F%B3%E7%9A%84library/</guid>
        <description>清风徐来 https://kissjava.cn/posts/ci%E4%B8%AD%E6%96%87%E8%BD%AC%E6%8B%BC%E9%9F%B3%E7%9A%84library/ -&lt;p&gt;拼装了一个codeigniter的中文转拼音的library。
使用方法：
&lt;!-- raw HTML omitted --&gt;
$this-&amp;gt;load-&amp;gt;library(&amp;lsquo;utf8pinyin&amp;rsquo;,&#39;&amp;rsquo;,&amp;lsquo;py&amp;rsquo;);
$data[&amp;ldquo;page_title&amp;rdquo;] = $this-&amp;gt;py-&amp;gt;str2py(&amp;lsquo;昆山风神贸易有限公司成立于2007年&amp;rsquo;);
//KunShanFengShenMaoYiYouXianGongSiChengLiYu2007Nian
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;str2py($str,$boolquanpin=true,$booldaxie=true)&lt;!-- raw HTML omitted --&gt;
$str是要转的中文；$boolquanpin是否全拼，默认全拼；$booldaxie首字母是否大写，默认大写。
&lt;!-- raw HTML omitted --&gt;utf8pinyin&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
- https://kissjava.cn/posts/ci%E4%B8%AD%E6%96%87%E8%BD%AC%E6%8B%BC%E9%9F%B3%E7%9A%84library/ - kissjava.cn</description>
        </item>
    
    
  </channel>
</rss> 