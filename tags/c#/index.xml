<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on 清风徐来</title>
    <link>https://kissjava.cn/tags/c#/</link>
    <description>Recent content in C# on 清风徐来</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>kissjava.cn</copyright>
    <lastBuildDate>Sat, 23 Sep 2017 13:28:00 +0000</lastBuildDate>
    
	<atom:link href="https://kissjava.cn/tags/c#/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WPF 的状态栏控件</title>
      <link>https://kissjava.cn/posts/wpf-%E7%9A%84%E7%8A%B6%E6%80%81%E6%A0%8F%E6%8E%A7%E4%BB%B6/</link>
      <pubDate>Sat, 23 Sep 2017 13:28:00 +0000</pubDate>
      
      <guid>https://kissjava.cn/posts/wpf-%E7%9A%84%E7%8A%B6%E6%80%81%E6%A0%8F%E6%8E%A7%E4%BB%B6/</guid>
      <description>状态栏可以放些提示信息，目前情况下会比 MessageBox 好用。特别是无需用户确认的情况。
简单的没意思，直接来个多栏的。 &amp;lt;StatusBar.ItemsPanel&amp;gt; &amp;lt;Grid.ColumnDefinitions&amp;gt; &amp;lt;/Grid.ColumnDefinitions&amp;gt; &amp;lt;/StatusBar.ItemsPanel&amp;gt; 效果： </description>
    </item>
    
    <item>
      <title>Enabling Scrollbar in WPF</title>
      <link>https://kissjava.cn/posts/enabling-scrollbar-in-wpf/</link>
      <pubDate>Fri, 22 Sep 2017 10:01:00 +0000</pubDate>
      
      <guid>https://kissjava.cn/posts/enabling-scrollbar-in-wpf/</guid>
      <description>Put a ScrollViewer inside your Window:  &amp;lt;ScrollViewer &amp;gt;&amp;lt;!-- Window content here --&amp;gt;&amp;lt;/ScrollViewer&amp;gt;&amp;lt;/Window&amp;gt; </description>
    </item>
    
    <item>
      <title>C sharp 测试代码的运行时间</title>
      <link>https://kissjava.cn/posts/c-sharp-%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E7%9A%84%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/</link>
      <pubDate>Wed, 20 Sep 2017 17:27:00 +0000</pubDate>
      
      <guid>https://kissjava.cn/posts/c-sharp-%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E7%9A%84%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/</guid>
      <description>计算C#代码运行的耗时，方便测试出效率。
System.Diagnostics.Stopwatch watch = new System.Diagnostics.Stopwatch();watch.Start(); //开始监视代码运行时间// 添加需要测试的代码// ...watch.Stop(); //停止TimeSpan timespan = watch.Elapsed; //获取当前实例测量得出的总时间System.Diagnostics.Debug.WriteLine(string.Format(&amp;quot;代码执行时间：{0}(毫秒)&amp;quot;, timespan.TotalMilliseconds));  TimeSpan 还可以计算出TotalHours，TotalMinutes， TotalSeconds。</description>
    </item>
    
    <item>
      <title>Visual C# 中的事件及委托</title>
      <link>https://kissjava.cn/posts/visual-csharp-%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%8F%8A%E5%A7%94%E6%89%98/</link>
      <pubDate>Sat, 09 Sep 2017 15:53:00 +0000</pubDate>
      
      <guid>https://kissjava.cn/posts/visual-csharp-%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%8F%8A%E5%A7%94%E6%89%98/</guid>
      <description>在传统的程式设计语言中，事件一般是一种回调。在C#中这种回调被称为委托，事件处理不过是通过委托呼叫方法。
委托类别定义一个方法签名，可将相容签名的方法与委托相关联。
C#中事件采用发布/订阅模型，订阅事件其实就是用委托来实现的。
namespace WpfApplication1{/// &amp;lt;summary&amp;gt;/// Interaction logic for MainWindow.xaml/// &amp;lt;/summary&amp;gt;public partial class MainWindow : Window{public MainWindow(){InitializeComponent();var timer = new System.Timers.Timer(1000);timer.Start();timer.Elapsed += new System.Timers.ElapsedEventHandler(TimerElapsedHandler);}void TimerElapsedHandler(object sender, EventArgs e){MessageBox.Show(&amp;quot;Timer has Elapsed&amp;quot;);}}} 第一个参数 sender 表示引发实践的物件；第二个参数 e 是传说的数据，类别是 EventArgs 或其子类。事件处理方法返回值 void。
其实委托关联可以简写为timer.Elapsed += TimerElapsedHandler;，取消事件订阅timer.Elapsed -= TimerElapsedHandler;
匿名委托更为简洁，但是取消订阅不好处理,这里不作展开。
2017年09月11日 更新一下匿名的两张写法：
timer.Elapsed += delegate(object sender, System.</description>
    </item>
    
    <item>
      <title>Visual C# 禁止应用多次启动</title>
      <link>https://kissjava.cn/posts/visual-csharp-%E7%A6%81%E6%AD%A2%E5%BA%94%E7%94%A8%E5%A4%9A%E6%AC%A1%E5%90%AF%E5%8A%A8/</link>
      <pubDate>Thu, 10 Aug 2017 17:23:00 +0000</pubDate>
      
      <guid>https://kissjava.cn/posts/visual-csharp-%E7%A6%81%E6%AD%A2%E5%BA%94%E7%94%A8%E5%A4%9A%E6%AC%A1%E5%90%AF%E5%8A%A8/</guid>
      <description>废话少说，上代码：
System.Diagnostics.Process[] myProcesses = System.Diagnostics.Process.GetProcessesByName(&amp;quot;AppProcessName&amp;quot;);if (myProcesses.Length &amp;gt; 1) {MessageBox.Show(&amp;quot;The application has already started ！&amp;quot;);Close();} 以上是 WPF 适用的。 如果是 winform 就把 Close() 改为 Application.Exit();。 end.</description>
    </item>
    
  </channel>
</rss>