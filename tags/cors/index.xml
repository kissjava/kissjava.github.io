<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CORS on 清风徐来</title>
    <link>https://kissjava.github.io/tags/cors/</link>
    <description>Recent content in CORS on 清风徐来</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>kissjava.cn</copyright>
    <lastBuildDate>Sat, 17 Aug 2019 20:39:00 +0000</lastBuildDate>
    
	<atom:link href="https://kissjava.github.io/tags/cors/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Demo 学 Echo Part12 CORS 跨域资源共享和Request 预检</title>
      <link>https://kissjava.github.io/posts/demo-%E5%AD%A6-echo-part12-cors-%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB%E5%92%8Crequest-%E9%A2%84%E6%A3%80/</link>
      <pubDate>Sat, 17 Aug 2019 20:39:00 +0000</pubDate>
      
      <guid>https://kissjava.github.io/posts/demo-%E5%AD%A6-echo-part12-cors-%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB%E5%92%8Crequest-%E9%A2%84%E6%A3%80/</guid>
      <description>CORS机制，它使用额外的 HTTP 头来告诉浏览器 让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。 以下是可用于CORS配置的标头列表
Access-Control-Allow-OriginAccess-Control-Allow-MethodsAccess-Control-Allow-HeadersAccess-Control-Allow-CredentialsAccess-Control-Max-AgeCORS配置位于目标Web应用程序的服务器端。 例如：我们的应用程序在本地从google.com中提取数据，然后CORS配置位于google.com;如果我们收到CORS错误，则无法完成任何其他操作，因为CORS应用程序目标由google.com上的人员控制。
练习时间： 创建一个新项目。这个简单的应用程序将在http//localhost:9000/上运行，然后我们将尝试从其他域访问它.
package mainimport (&amp;quot;log&amp;quot;&amp;quot;net/http&amp;quot;)func main() {http.HandleFunc(&amp;quot;/index&amp;quot;, func(w http.ResponseWriter, r *http.Request) {w.Header().Set(&amp;quot;Access-Control-Allow-Origin&amp;quot;, &amp;quot;https://www.google.com&amp;quot;)w.Header().Set(&amp;quot;Access-Control-Allow-Methods&amp;quot;, &amp;quot;OPTIONS, GET, POST, PUT&amp;quot;)w.Header().Set(&amp;quot;Access-Control-Allow-Headers&amp;quot;, &amp;quot;Content-Type, X-CSRF-Token&amp;quot;)if r.Method == &amp;quot;OPTIONS&amp;quot; {w.Write([]byte(&amp;quot;allowed&amp;quot;))return}w.Write([]byte(&amp;quot;hello&amp;quot;))})log.Println(&amp;quot;Starting app at :9000&amp;quot;)http.ListenAndServe(&amp;quot;:9000&amp;quot;, nil)}上面的代码表示允许从https://www.google.com发送的请求进入;我们选择了谷歌域名，因为测试将从那里完成，请求的目标是http://localhost:9000/
我们模拟是从google.com 访问 本地主机Web应用localhost:9000（使用Chrome的开发人员工具从浏览器执行请求）。不是通过localhost:9000访问google.com，不要理解为颠倒。
再次说明，localhost:9000是受，google.com是攻。够形象了吧。
Access-Control-Allow-Methods标头确定允许哪些HTTP方法（使用逗号分隔符输入） Access-Control-Allow-Headers标头确定请求中允许哪些标头密钥。
好的，我们可以测试了。 首先，请确保安装了Google Chrome； 其次，你可以爬墙； 然后安装jQuery Injector扩展。 打开https://www.</description>
    </item>
    
  </channel>
</rss>