<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSRF on 清风徐来</title>
    <link>https://kissjava.cn/tags/csrf/</link>
    <description>Recent content in CSRF on 清风徐来</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>kissjava.cn</copyright>
    <lastBuildDate>Sat, 17 Aug 2019 21:33:00 +0000</lastBuildDate>
    
	<atom:link href="https://kissjava.cn/tags/csrf/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Demo 学 Echo Part13 跨站点请求伪造（CSRF）</title>
      <link>https://kissjava.cn/posts/demo-%E5%AD%A6-echo-part13-%E8%B7%A8%E7%AB%99%E7%82%B9%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0csrf/</link>
      <pubDate>Sat, 17 Aug 2019 21:33:00 +0000</pubDate>
      
      <guid>https://kissjava.cn/posts/demo-%E5%AD%A6-echo-part13-%E8%B7%A8%E7%AB%99%E7%82%B9%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0csrf/</guid>
      <description>跨站点请求伪造（CSRF）攻击以及如何预测它们
此类攻击的示例：尝试通过Web浏览器以外的媒体登录，例如使用CURL等
通常的防御方法是使用csrf令牌。在有表单的每个页面上，都会生成csrf令牌。提交表单时，会在请求中插入CSRF，然后后端检查发送的CSRF是否有效
csrf令牌本身是每次表单页面出现时生成的随机字符串。通常在每个POST请求中，令牌都作为标头，数据表单或查询字符串插入
package mainimport (&amp;quot;fmt&amp;quot;&amp;quot;html/template&amp;quot;&amp;quot;net/http&amp;quot;&amp;quot;github.com/labstack/echo&amp;quot;&amp;quot;github.com/labstack/echo/middleware&amp;quot;)type M map[string]interface{}func main() {tmpl := template.Must(template.ParseGlob(&amp;quot;./*.html&amp;quot;))e := echo.New()const CSRF_TOKEN_HEADER = &amp;quot;X-Csrf-Token&amp;quot;const CSRF_KEY = &amp;quot;csrf_token&amp;quot;e.Use(middleware.CSRFWithConfig(middleware.CSRFConfig{TokenLookup: &amp;quot;header:&amp;quot; + CSRF_TOKEN_HEADER,ContextKey: CSRF_KEY,}))e.GET(&amp;quot;/index&amp;quot;, func(c echo.Context) error {data := make(M)data[CSRF_KEY] = c.Get(CSRF_KEY)return tmpl.ExecuteTemplate(c.Response(), &amp;quot;view.html&amp;quot;, data)})//sayhello处理程序中没有csrf标记检查，因为它已被中间件隐式处理e.POST(&amp;quot;/sayhello&amp;quot;, func(c echo.Context) error {data := make(M)if err := c.</description>
    </item>
    
  </channel>
</rss>