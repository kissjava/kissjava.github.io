<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kohana on 清风徐来</title>
    <link>https://kissjava.cn/tags/kohana/</link>
    <description>Recent content in kohana on 清风徐来</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>kissjava.cn</copyright>
    <lastBuildDate>Tue, 16 Jun 2009 10:08:25 +0000</lastBuildDate>
    
	<atom:link href="https://kissjava.cn/tags/kohana/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>系统时间不准确造成 IE 下 Kohana 的 Captcha 库验证失败</title>
      <link>https://kissjava.cn/posts/%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E4%B8%8D%E5%87%86%E7%A1%AE%E9%80%A0%E6%88%90-ie-%E4%B8%8B-kohana-%E7%9A%84-captcha-%E5%BA%93%E9%AA%8C%E8%AF%81%E5%A4%B1%E8%B4%A5/</link>
      <pubDate>Tue, 16 Jun 2009 10:08:25 +0000</pubDate>
      
      <guid>https://kissjava.cn/posts/%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E4%B8%8D%E5%87%86%E7%A1%AE%E9%80%A0%E6%88%90-ie-%E4%B8%8B-kohana-%E7%9A%84-captcha-%E5%BA%93%E9%AA%8C%E8%AF%81%E5%A4%B1%E8%B4%A5/</guid>
      <description>淡水碰到了，记下来备忘。
作者：Hily 原始链接：http://hily.me/blog/2009/04/system-time-kohana-captcha-fail/ 版权声明：可以转载，转载时务必以超链接形式标明文章原始出处和作者信息及版权声明
好糗……
最近玩 Kohana 碰到太多诡异的问题，比如所有模板都要以 UTF8 无 BOM 的编码格式保存，否则 IE 下显示会有问题。自己写的 helper 类也要保存成 UTF8 无 BOM 的编码格式，否则也会出现类似的问题。
这一系列诡异的问题，把我原本清晰的思路也被搞乱了。
测试代码（使用 Kohana 文档上的）：
// Load Captcha library, you can supply the name of the config group you would like to use. $captcha = new Captcha; // Ban bots (that accept session cookies) after 50 invalid responses. // Be careful not to ban real people though! Set the threshold high enough.</description>
    </item>
    
    <item>
      <title>kohana版企业站范例进行中</title>
      <link>https://kissjava.cn/posts/kohana%E7%89%88%E4%BC%81%E4%B8%9A%E7%AB%99%E8%8C%83%E4%BE%8B%E8%BF%9B%E8%A1%8C%E4%B8%AD/</link>
      <pubDate>Sat, 02 May 2009 06:51:31 +0000</pubDate>
      
      <guid>https://kissjava.cn/posts/kohana%E7%89%88%E4%BC%81%E4%B8%9A%E7%AB%99%E8%8C%83%E4%BE%8B%E8%BF%9B%E8%A1%8C%E4%B8%AD/</guid>
      <description>以前是用codeigniter做的，但是为了更敏捷的开发，提高生产效率（其实是要偷懒），所以开始摸索kohana，并为之着迷（主要是ORM）。
为了尽快上手kohana，所以把以前公布的企业站又用kohana改写一番。 现在前端已经完成。
kohana版，为了简化代码，使用了ORM Codeigniter版，采用了他提供的AR
可以自己感觉一下执行效率如内存占用
kohana版http://tsingfeng.sinaapp.com/khn一般结果：Page rendered in 0.0301 seconds.UseMem 1.62MB.
Codeigniter版http://tsingfeng.sinaapp.com/ci一般结果：Page rendered in 0.0248 seconds.UseMem 1.78MB.
淡水没有专业的测试经验，只是凭框架本身提供的简陋数据和直觉判断。差不多了，如果空间支持php5最好还是用kohana，可以比较快些完成工作^_^
2009.5.3 update: 给kohana版的加上了含分页的新闻列表页面 http://tsingfeng.</description>
    </item>
    
    <item>
      <title>Kohana 与JQUERY实现连动</title>
      <link>https://kissjava.cn/posts/kohana-%E4%B8%8Ejquery%E5%AE%9E%E7%8E%B0%E8%BF%9E%E5%8A%A8/</link>
      <pubDate>Thu, 23 Apr 2009 16:10:25 +0000</pubDate>
      
      <guid>https://kissjava.cn/posts/kohana-%E4%B8%8Ejquery%E5%AE%9E%E7%8E%B0%E8%BF%9E%E5%8A%A8/</guid>
      <description>控制器 /**
 ajax加载城市分类   */ public function load_cities($id) { $id = (int) $id; if (!$id) { exit(&amp;quot;{result:0,msg:&amp;lsquo;错误的城市编号&amp;rsquo;}&amp;quot;); } $cities = ORM::factory(&amp;lsquo;city&amp;rsquo;); $cats = $cities-&amp;gt;where(&amp;lsquo;province_id&amp;rsquo;,$id)-&amp;gt;select_list(&amp;lsquo;id&amp;rsquo;,&amp;lsquo;name&amp;rsquo;); if (!count($cats)) { $cats = array(); } ksort($cats); exit(&amp;quot;{result:1,msg:&amp;quot;.json_encode($cats).&amp;quot;}&amp;quot;); }
public function index() { //生成省市下拉列表 $provinces = ORM::factory(&amp;lsquo;province&amp;rsquo;)-&amp;gt;select_list(&amp;lsquo;id&amp;rsquo;,&amp;lsquo;name&amp;rsquo;); $provinces[&#39;&#39;] = &amp;lsquo;未选择&amp;rsquo;; ksort($provinces); $this-&amp;gt;template-&amp;gt;provinces = $provinces; if ($data[&amp;lsquo;province_id&amp;rsquo;]) { $cities = ORM::factory(’city’)-&amp;gt;where(’province_id’,$data[&amp;lsquo;province_id&amp;rsquo;])-&amp;gt;select_list(’id’,&amp;lsquo;name&amp;rsquo;); } $cities[&#39;&#39;] = &amp;lsquo;未选择&amp;rsquo;; ksort($cities); $this-&amp;gt;template-&amp;gt;cities = $cities; $this-&amp;gt;add_script(&amp;lsquo;home/js/company/add.js?3&amp;rsquo;); } view }); </description>
    </item>
    
    <item>
      <title>kohana一个工程下面建立多个项目app</title>
      <link>https://kissjava.cn/posts/kohana%E4%B8%80%E4%B8%AA%E5%B7%A5%E7%A8%8B%E4%B8%8B%E9%9D%A2%E5%BB%BA%E7%AB%8B%E5%A4%9A%E4%B8%AA%E9%A1%B9%E7%9B%AEapp/</link>
      <pubDate>Thu, 23 Apr 2009 16:00:35 +0000</pubDate>
      
      <guid>https://kissjava.cn/posts/kohana%E4%B8%80%E4%B8%AA%E5%B7%A5%E7%A8%8B%E4%B8%8B%E9%9D%A2%E5%BB%BA%E7%AB%8B%E5%A4%9A%E4%B8%AA%E9%A1%B9%E7%9B%AEapp/</guid>
      <description>其实核心的意思就是使用多个application文件夹，而共享一个system和module
请参考文章：http://learn.kohanaphp.com/2008/08/15/initial-setup-of-a-kohana-project-revisited/ 具体办法就是建立类似的文件夹结构：
app_admin // administration application app_sales // sales application app_public // public website modules system webroot 然后注意写配置文件就OK了
app_admin/config/config.php: $config[&amp;lsquo;site_domain&amp;rsquo;] = ‘localhost/admin/’;
app_sales/config/config.php: $config[&amp;lsquo;site_domain&amp;rsquo;] = ‘localhost/sales/’;
app_public/config/config.php: $config[&amp;lsquo;site_domain&amp;rsquo;] = ‘localhost/’;</description>
    </item>
    
    <item>
      <title>Kohana的Events和Hooks研究</title>
      <link>https://kissjava.cn/posts/kohana%E7%9A%84events%E5%92%8Chooks%E7%A0%94%E7%A9%B6/</link>
      <pubDate>Thu, 23 Apr 2009 15:59:38 +0000</pubDate>
      
      <guid>https://kissjava.cn/posts/kohana%E7%9A%84events%E5%92%8Chooks%E7%A0%94%E7%A9%B6/</guid>
      <description>Kohana是一个使用PHP5的面向对象的MVC框架，是从CodeIgniter衍生出来，研究了几天，感觉还不错，就是它的文档实在太简陋了，在看到它的Events机制和Hooks机制时，确实有点不明白，文档上说的实在太简单了，后来我在Google上搜索了一下，找到两篇文章《Events and hooks in Kohana》和《Practical Kohana Hooks example: PHPIDS》，上面讲了一下Kohana的Events和Hooks，并举了例子，我也开始慢慢理解了它的含义。
在Kohana的Events中，默认定义了很多的Events（例如system.ready、system.pre_controller等等），中文理解就是事件，也就是触发点，在程序在运行到某个位置时，会被触发，具体就是调用Event::run方法，我们在Kohana.php里可以看到在不同的位置执行了不同的Event::run方法，那么Hooks的意义在于当一个事件被触发之前，可以通过已加载的Hooks来修改事件的回调，有点绕口，说白了就是在事件发生之前，做点事情，举个例子，你安排了今天的日程，下午3点要开会，那么在3点开会就是一个Event（事件），那么到3点的时刻，你希望提醒你一下，你在你的手机里定了一个闹钟，在3点的时候会响，这就是一个Hook，可以看出Hook是基于Event的。
我们可以创建自己的Hook程序，并加载如默认的Events里，但是默认的Events不一定能满足我们的需要，比如我们在Web应用中经常使用的权限校验，判断这个用户是否登陆过，我们虽然可以使用默认Events里的system.pre_controller，但是这个Event是针对所有的Controller的，有些Controller是不需要校验用户的，还好Kohana允许自己定义Event，下面我们还是举例说明吧。
要使用Hooks，首先要在application/config/config.php里将$config[&amp;lsquo;enable_hooks&amp;rsquo;]置为TRUE。
之后我们定义自己的Event，我们在application/controllers目录下建立base.php，代码如下： class Base_Controller extends Controller {
public function __construct() { parent::__construct(); Event::run(&amp;quot;base.construct&amp;quot;); }	 } 我们继承了Kohana的Controller，在构造函数里定义了Event，名字叫“base.construct”，以后我们的Controller都继承自Base_Controller，那么在对象创建的时候都会触发base.construct事件。
Hook的文件放在application/hooks下，我们就创建一个hook文件sessioncheck.php，代码如下： class SessionCheck {
public function check() { echo &amp;quot;check session ...&amp;quot;; }  }
Event::add(&amp;lsquo;base.construct&amp;rsquo;, array(&amp;lsquo;SessionCheck&amp;rsquo;,&amp;lsquo;check&amp;rsquo;)); 我们将SessionCheck的check方法加载到了base.construct事件上，也就是在触发base.construct事件之前，会执行SessionCheck的check方法。
接下来我们写一个Controller，在application/controllers目录下建立first.php，代码如下： class First_Controller extends Base_Controller {
public function index() { echo &amp;quot;First - index&amp;quot;; exit(); }  } 我们执行一下看看会有什么提示，http://localhost/kohana/first，显示
check session …First - index</description>
    </item>
    
    <item>
      <title>Kohana的Cache</title>
      <link>https://kissjava.cn/posts/kohana%E7%9A%84cache/</link>
      <pubDate>Thu, 23 Apr 2009 15:59:13 +0000</pubDate>
      
      <guid>https://kissjava.cn/posts/kohana%E7%9A%84cache/</guid>
      <description>Kohana里有个Cache Library，我今天就测试了一下。
首先要配置，将system/config下的cache.php复制到application/config下，打开cache.php文件，我们看一下内容
在应用中，可能需要不止一个缓存，所以可以配置多个缓存，增加$config数组即可，还有在file方式下可以为每个缓存设置单独文件路径，但前提是文件路径要存在，例如我们增加一个
public function index() { $mychache = Cache::instance(&amp;quot;my&amp;quot;); $mychache-&amp;gt;set(&amp;quot;name&amp;quot;,&amp;quot;laoer&amp;quot;); echo &amp;quot;OK&amp;quot;; } public function name() { $mychache= Cache::instance(&amp;quot;my&amp;quot;); $name = $mychache-&amp;gt;get(&amp;quot;name&amp;quot;); echo $name; }  } Cache::instance(”my”)实例化配置里$config[&amp;lsquo;my&amp;rsquo;]的cache，如果用Cache::instance()就是实例化配置里$config[&amp;lsquo;default&amp;rsquo;]的cache，在浏览器里执行，已经可以存取了，在application/cache/my/文件下可以看到一个名为”name~~0″的文件，里面就是序列化的数据。
文件cache还是有一定的局限性，现在越来越的网站开始使用Memcached所谓缓存的解决方案，Kohana的缓存驱动里，有Memcached的支持，但它的文档却没有给出Memcached的配置例子，看来要自己摸索一下。
将system/config下的cache_memcache.php复制到application/config下，cache_memcache.php的内容如下
/**
 Enable cache data compression. */ $config[&amp;lsquo;compression&amp;rsquo;] = FALSE; 根据你自己的情况修改Memcached的服务地址和端口，在application/config/cache.php里再加一段 $config[&amp;lsquo;mem&amp;rsquo;] = array ( &amp;lsquo;driver&amp;rsquo; =&amp;gt; &amp;lsquo;memcache&amp;rsquo;, &amp;lsquo;params&amp;rsquo; =&amp;gt; &amp;lsquo;&amp;rsquo;, &amp;lsquo;lifetime&amp;rsquo; =&amp;gt; 1800, &amp;lsquo;requests&amp;rsquo; =&amp;gt; 1000 ); 在Controller里把Cache::instance(”my”)改为Cache::instance(”mem”)，运行看看结果，已经可以从Memcahced里存取了。  Kohana的Memcached驱动还是有些缺陷，现在只能使用一组Memcached，即$config[&amp;lsquo;servers&amp;rsquo;]这个参数，我觉得Memcacahed组也应该是多个，因为从业务角度会根据功能对cache做划分，我大概看了一下system/libraries/drivers/Cache/Memcache.php文件，应该是可以改造的，还有一点，编译PHP的时候要安装Memcached的支持。
from：http://i.laoer.com/</description>
    </item>
    
    <item>
      <title>Kohana 起步了</title>
      <link>https://kissjava.cn/posts/kohana-%E8%B5%B7%E6%AD%A5%E4%BA%86/</link>
      <pubDate>Tue, 03 Mar 2009 22:06:05 +0000</pubDate>
      
      <guid>https://kissjava.cn/posts/kohana-%E8%B5%B7%E6%AD%A5%E4%BA%86/</guid>
      <description>开始琢磨Kohana。先看了一下Kohana 101，出现了一些问题。
当做到 http://localhost/kohana/index.php/test/bye 时，出现了问题。并没有期望的视图出现，而是
但是文档并没有提到是何原因。还好有Codeigniter打底。原来是淡水在class中写了一个空的__contruct()，而101并没有用它。 把它去掉，或是在里面调用一下父类的构造函数就ok了。
使用Query Builder查询id=3的产品信息。用php5的method chaining方式： $query = $this-&amp;gt;db-&amp;gt;select() -&amp;gt;where(&amp;lsquo;id&amp;rsquo;,3) -&amp;gt;form(&amp;lsquo;products&amp;rsquo;) -&amp;gt;get(); 嗯，这个Codeigniter也有。
淡水还发现了101的两个笔误：
1）20页，Products表插入数据的sql语句里，第三条少个结尾逗号。
2）在26页里，
貌似发送mail时需要PEAR，否则出错:(,怀念Codeigniter的email类了。</description>
    </item>
    
  </channel>
</rss>