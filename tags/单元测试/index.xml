<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>单元测试 on 清风徐来</title>
    <link>https://kissjava.cn/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
    <description>Recent content in 单元测试 on 清风徐来</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>kissjava.cn</copyright>
    <lastBuildDate>Tue, 30 Jul 2019 22:06:59 +0000</lastBuildDate>
    
	<atom:link href="https://kissjava.cn/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>高级Go测试教程</title>
      <link>https://kissjava.cn/posts/%E9%AB%98%E7%BA%A7go%E6%B5%8B%E8%AF%95%E6%95%99%E7%A8%8B/</link>
      <pubDate>Tue, 30 Jul 2019 22:06:59 +0000</pubDate>
      
      <guid>https://kissjava.cn/posts/%E9%AB%98%E7%BA%A7go%E6%B5%8B%E8%AF%95%E6%95%99%E7%A8%8B/</guid>
      <description>本教程中，我们将介绍Go语言更高级测试实践。</description>
    </item>
    
    <item>
      <title>Go的单元测试</title>
      <link>https://kissjava.cn/posts/go%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Tue, 30 Jul 2019 19:00:00 +0000</pubDate>
      
      <guid>https://kissjava.cn/posts/go%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>测试在所有软件中都非常重要。 能够确保代码的正确性并确保您所做的任何更改最终都不会破坏代码库中任何其他部分的内容，这非常重要。
##目标
在本教程结束时，您将掌握使用标准testing包，测试Go中的基本函数和方法。
在本教程中，我们将介绍如何使用go test命令为您的go代码开发和运行测试。
##Go的测试文件
如果您之前看过一些go项目，您可能已经注意到大多数（如果不是全部）的项目，Go代码文件都在同一目录中具有FILE_test.go对应项。
这些文件包含项目的所有单元测试，测试其对应的所有代码
简单的项目机构
myproject/- calc.go- calc_test.go- main.go- main_test.go##一个简单的测试文件
假如我们有一个非常简单的go程序，它由一个文件组成，并具有calculate（）函数。这个calculate（）函数只需要1个参数，返回加2后的结果。让我们开始运行 main.go
package mainimport (&amp;quot;fmt&amp;quot;)// 计算 returns x + 2.func Calculate(x int) (result int) {result = x + 2return result}func main() {fmt.Println(&amp;quot;Hello World&amp;quot;)}如果想要进行测试，我们可以在同一目录中创建一个main_test.go文件并编写以下测试： main_test.go
package mainimport (&amp;quot;testing&amp;quot;)func TestCalculate(t *testing.T) {if Calculate(2) != 4 {t.</description>
    </item>
    
    <item>
      <title>Simple Test 中文参考</title>
      <link>https://kissjava.cn/posts/simple-test-%E4%B8%AD%E6%96%87%E5%8F%82%E8%80%83/</link>
      <pubDate>Mon, 25 Jun 2012 15:14:00 +0000</pubDate>
      
      <guid>https://kissjava.cn/posts/simple-test-%E4%B8%AD%E6%96%87%E5%8F%82%E8%80%83/</guid>
      <description>&lt;p&gt;先来一个SimpleTest的简单的演示。&lt;/p&gt;
&lt;p&gt;我们假设我们正在测试一个简单的文件登陆类。这个叫做Log的类放在classes/log.php里。
我们用以下代码来创建一个测试脚本放在tests/log_test.php里．
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;autorun.php不仅包含了Simpletest的相关文件，还能够把测试自动执行起来。&lt;/p&gt;
&lt;p&gt;TestOfLogging是我们的第一测试用例，此时还是空的。每一个测试用例都是一个继承SimpleTest的类，我们可以在一个文件里写多个测试用例。&lt;/p&gt;
&lt;p&gt;代码的第三行，引入了Log类，现在我们有了测试框架，但还没有写具体的测试。&lt;/p&gt;
&lt;p&gt;第一个测试，我们假定Log类通过构造函数传入要存储log信息的文件名，并且我们有临时文件夹来放置这个文件&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&amp;lt;?php
require_once(&amp;lsquo;simpletest/autorun.php&amp;rsquo;);
require_once(&amp;rsquo;../classes/log.php&amp;rsquo;);&lt;/p&gt;
&lt;p&gt;class TestOfLogging extends UnitTestCase {
function testLogCreatesNewFileOnFirstMessage() {
@unlink(&#39;/temp/test.log&amp;rsquo;);
$log = new Log(&#39;/temp/test.log&amp;rsquo;);
$this-&amp;gt;assertFalse(file_exists(&#39;/temp/test.log&amp;rsquo;));
$log-&amp;gt;message(&amp;lsquo;Should write this to a file&amp;rsquo;);
$this-&amp;gt;assertTrue(file_exists(&#39;/temp/test.log&amp;rsquo;));
}
}
?&amp;gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;当一个测试用例执行时，它会搜索所有以&amp;quot;test&amp;quot;开头的方法来并且执行。 这里我们用了一个很长的方法名testLogCreatesNewFileOnFirstMessage()，这是一个好习惯，可以让测试的输出信息更有可读性。&lt;/p&gt;
&lt;p&gt;通常一个测试用例里会有多个测试方法，后边会具体来讲。&lt;/p&gt;
&lt;p&gt;测试方法中的断言（assertion）会触发测试框架来即时显示测试结果。这个即时反馈很重要，不仅发生在代码导致的崩溃时，也用来显示与断言有关的调试信息。&lt;/p&gt;
&lt;p&gt;要看测试结果，我们需要实际地执行一下测试。不需要再写代码了，只要在浏览器里打开这个页面就可以了
测试失败会显示以下信息&amp;hellip;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;1/1 test cases complete. 1 passes and 1 fails.&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;通过测试则会显示以下信息&amp;hellip;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;如果你得到这样的信息&amp;hellip;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;表示你没准备好classes/Log.php这个文件&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&amp;lt;?php
class Log {
function Log($file_path) {
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function message() {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}
?&amp;gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;在测试之后写代码，这样的开发方式称之为“测试驱动开发”&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>codeigniter2中使用simpletest做单元测试</title>
      <link>https://kissjava.cn/posts/codeigniter2%E4%B8%AD%E4%BD%BF%E7%94%A8simpletest%E5%81%9A%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Sat, 29 Oct 2011 12:26:11 +0000</pubDate>
      
      <guid>https://kissjava.cn/posts/codeigniter2%E4%B8%AD%E4%BD%BF%E7%94%A8simpletest%E5%81%9A%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>接近年底，人手紧张。为了保证进度的同时还要保证质量，于是就单元测试就出现在了淡水的视野。
由于采用codeigniter2，所以首选是内置的unit_test类。但是实在是比较的简单，所以就看中了simpletest。 但是ci+simpletest整合起来，网上可用的并不多。支持1.6/1.7的倒是有。
最后才用呢了codeigniter—simpletest，但是默认在php5.2下，并不能运行。做了些调整，嗯。记录一下。
##安装 unit_test.php文件应该放在CodeIgniter的根目录，也就是index.php相同的地方 打开这个文件,并且在文件顶部改变一下以适合你的路径。 tests目录可以放到任何你想放的地方,但放在根目录比较好。 所有测试文件需要命名成“test_name_folder.php”的格式。例如: test_whatever_bug.php test_string_helper.php test_auth_library.php test_core_model.php 增加了一个完整的simpletest下载，仅定制了“simpletest/extensions/my_reporter.php”。
　##注: 在目录“tests”里,包含了两个测试文件的例子。test_users_model。php并能运行，因为你的程序里没有对应的user model。它只是一个提供的指导。 注意,simpletest版本不支持php 5.3
下面的修改很重要！！！ 淡水的本机测试无法成功，查看日志后，淡水做了如下修改： 1,unit_test.php 的32-36行；的构造函数: public function __construct($lable=false) { parent::__construct($lable); $this-&amp;gt;_ci =&amp;amp; get_instance(); }
2,test/tests/test_gui.php增加编码支持： 3,test_123_bug.php的构造函数里，调用父类构造时，添加了测试主题。方便显示。可以忽视。
4,test_user_model.php的构造改用php5的方式调用： public function __construct() { parent::__construct(&amp;lsquo;Users Model&amp;rsquo;); $this-&amp;gt;load-&amp;gt;model(&amp;lsquo;users/users_model&amp;rsquo;); $this-&amp;gt;rand = rand(500,15000); }
5,另外还增加了test_homepage.php的demo，来演示如何测试界面。</description>
    </item>
    
    <item>
      <title>Codeigniter里的单元测试</title>
      <link>https://kissjava.cn/posts/codeigniter%E9%87%8C%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Thu, 27 Oct 2011 12:49:57 +0000</pubDate>
      
      <guid>https://kissjava.cn/posts/codeigniter%E9%87%8C%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>测试驱动开发已经提出好久了。在web领域估计国内采用的不多。 其实单元测试也是很好用的东西，确实可以提高开发人员的效率。 淡水用codeigniter举例说明一下。 </description>
    </item>
    
  </channel>
</rss>