<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>基本数据类型 on 清风徐来</title>
    <link>/tags/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
    <description>Recent content in 基本数据类型 on 清风徐来</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>kissjava.cn</copyright>
    <lastBuildDate>Mon, 29 Jul 2019 15:47:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go的基本数据类型</title>
      <link>/posts/go%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 29 Jul 2019 15:47:00 +0000</pubDate>
      
      <guid>/posts/go%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>在本教程中，我们将学习Go语言中可用的所有基本数据类型。在本教程结束时，您应该熟悉该语言中提供的各种不同类型，并希望了解如何在您自己的Go程序中使用这些类型。 ps：本节课程很无聊，但是不可或缺。
##数据类型 Go编程语言中有4种不同类型的类型
 基本类型 我们将在本教程中介绍的内容 聚合类型 数组和结构 引用类型 指针和切片 接口类型 标准接口  ##整型
简单点，直接在代码里注释讲解吧
// 所有数字类型默认为0// 无符号的8位整型// 可存储: 0 to 255var myint uint8// 有符号的8位整型// 可存储: -127 to 127var myint int8// 无符号的16位整型var myint uint16// 有符号的16位整型var myint int16// 无符号的32位整型var myint uint32// 带符号的32位整型var myint int32// 无符号的64位整型var myint uint64// 带符号的64位整型var myint int64存储超过大小的值编译会无法通过。初始存储未超过大小，但是运行中溢出了，可能会出现其它结果：
package mainimport (&amp;quot;fmt&amp;quot;)func main() {fmt.</description>
    </item>
    
  </channel>
</rss>