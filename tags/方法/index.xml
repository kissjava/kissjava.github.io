<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>方法 on 清风徐来</title>
    <link>https://kissjava.cn/tags/%E6%96%B9%E6%B3%95/</link>
    <description>Recent content in 方法 on 清风徐来</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>kissjava.cn</copyright>
    <lastBuildDate>Mon, 29 Jul 2019 18:52:00 +0000</lastBuildDate>
    
	<atom:link href="https://kissjava.cn/tags/%E6%96%B9%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go的方法</title>
      <link>https://kissjava.cn/posts/go%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 29 Jul 2019 18:52:00 +0000</pubDate>
      
      <guid>https://kissjava.cn/posts/go%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>在本教程中，我们将首先了解哪些方法以及它们如何在Go编程语言的范围内工作。然后，我们将看看揭开方法和函数之间的差异，以及何时在Go程序中使用它们。 ##一个简单实例 我们将创建一个非常简单的员工管理系统，允许您更新员工姓名并打印出该名称。不是最令人兴奋的示例项目，但它将作为演示还可以。
我们首先创建一个Employee类型的结构，它包含一个字符串字段Name
接下来，我们将声明一个UpdateName()和一个PrintName()方法，它允许我们更新和打印我们创建的员工的姓名。
package mainimport (&amp;quot;fmt&amp;quot;)type Employee struct {Name string}func (e *Employee) UpdateName(newName string) {e.Name = newName}func (e *Employee) PrintName() {fmt.Println(e.Name)}func main() {var employee Employeeemployee.Name = &amp;quot;Michael&amp;quot;employee.UpdateName(&amp;quot;Mike&amp;quot;)employee.PrintName()}与函数一样，方法会创建传递给它的参数的副本。为避免这种情况，我们可以在定义方法时使用指针接收器func (pointer *Pointer) myMethod()。指针指向内存地址，是传递的引用。多用用就回习惯了，不像C的指针那么恐怖。
为什么我们在Go程序中使用方法呢？
##函数vs方法
方法通常作用于给定的对象，即player.Update（params），这种方式比用UpdatePlayer（player，params）更优雅和直观。
func UpdatePlayer(player *Player, params ParamsStruct) {fmt.Println(&amp;quot;这是个简单的函数&amp;quot;)}UpdatePlayer(player, params)上面需要传入player和其它参数，下面的方式更加明了：
func (g *Player) Update(params ParamsStruct) {fmt.</description>
    </item>
    
  </channel>
</rss>